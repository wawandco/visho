on:
  push:
    branches:
      - main
  release:
    types:
      - created
jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16.x
    - run: npm install
    
    # - run: xvfb-run -a npm test
    #   if: runner.os == 'Linux'
    
    # - run: npm test
    #   if: runner.os != 'Linux'

    - name: get release version
      if: success() && startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-latest'
      id: release_version
      run: |
        TAGGED_VERSION="${GITHUB_REF/refs\/tags\/v/}"
        if [[ ! "${TAGGED_VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
          echo "Invalid version tag '${TAGGED_VERSION}'"
          exit 1
        fi
        
        echo "EXT_VERSION=${TAGGED_VERSION}" >> $GITHUB_ENV
        
    - name: stamp version
      if: success() && startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-latest'
      run: |
        cat package.json | jq --arg VER "${{ env.EXT_VERSION }}" '.version=$VER' > /tmp/package.json 
        cp /tmp/package.json ./package.json
    
    - name: Publish
      if: success() && startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-latest'
      run: npm run deploy
      env:
        VSCE_PAT: ${{ secrets.VSCE_PAT }}
        VERSION: ${{ github.ref_name }}
